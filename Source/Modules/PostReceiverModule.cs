using System;
using System.Threading;
using System.Collections.Generic;

using RedditSharp;
using RedditSharp.Things;

namespace HFYBot.Modules
{
	public class PostReceiverModule : RedditModule
	{
		Thread thread;

		private bool enabled = false;

		TimeSpan waitTime = new TimeSpan (0, 5, 0);



		public PostReceiverModule (Reddit reddit, Subreddit sub) :base("post receiver", reddit)
		{
			thread = new Thread(new ThreadStart(run()));
			ModuleState = ModuleState.Diabled;
		}
	
		void MakePass(int postCount){
			try{
				List<RedditUser> pendingEdits = new List<RedditUser>(0);

				List<Post> posts = sub.New.GetListing(postCount);
				foreach(Post post in posts){
					if(isOC(post) && !processed(post)){
						if(!pendingEdits.Exists(post.Author)) pendingEdits.Add(post.Author);
						post.Comment("Please wait...");
					}
				}

				foreach(RedditUser user in pendingEdits){
					string comment = generateCommentText(user);
					foreach(Post post in user.Posts){
						if(isOC(post)){
							foreach(Comment comm in post.Comments)
								if(comm.Author.Equals(reddit.User.Name))
									comm.EditText(comment);
						}
					}
				}

			} catch (System.Net.WebException) {
				ModuleState = ModuleState.Crashed;
				enabled = false;
			}
		}

		string generateCommentText(RedditUser user){
			int count = 0;
			List<Post> availiblePosts = new List<Post>(0);
			foreach (Post post in user.Posts) {
				if (post.Subreddit.Equals (sub) && isOC (post)) {
					if (availiblePosts.Count < 25)
						availiblePosts.Add (post);
					count++;
				}
			}

			string comm;

			if (count > 1) {
				comm = "There are " + count.ToString () + " stories by [u/" + user.Name + "](http://reddit.com/u/" + user.Name + ") Including:";
				foreach (Post p in availiblePosts) {
					comm += "\n\n* [" + p.Title + "](" + p.Url + ")";
				}
			} else {
				comm = "There are no other stories by [u/" + user.Name + "](http://reddit.com/u/" + user.Name+ ")";
			}

			comm += "\n\nThis list was automatically generated by HFYBotReborn version "
				+ Program.version
				+". Please contact /u/KaiserMagnus if you have any queries. This bot is [open source]((https://github.com/waitingtocompile/HFYBotReborn).";
			return comm;
		}

		bool isOC(Post post){
			return (post.Title.ToUpperInvariant().Contains("[OC]")|post.LinkFlairText.ToUpperInvariant().Equals("OC"));
		}

		bool processed(Post post){
			foreach (Comment com in post.Comments) {
				if (com.Author.Equals (reddit.User.Name))
					return true;
			}
			return false;
		}

		void run()
		{
			state = ModuleState.Enabled;
			MakePass(40);
			while (enabled) {
				state = ModuleState.Idle;
				Thread.Sleep (waitTime);
				state = ModuleState.Enabled;
				MakePass(5);
			}
			state = ModuleState.Diabled;
		}

		public void setEnabled(bool b){
			if (!b && state.Equals (ModuleState.Idle)) {
				thread.Abort ();
				enabled = false;
			} else
				enabled = b;
		}
	}
}

